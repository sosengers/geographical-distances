# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from geodistances.models.base_model_ import Model
from geodistances import util


class Locations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_1=None, address_2=None):  # noqa: E501
        """Locations - a model defined in OpenAPI

        :param address_1: The address_1 of this Locations.  # noqa: E501
        :type address_1: float
        :param address_2: The address_2 of this Locations.  # noqa: E501
        :type address_2: str
        """
        self.openapi_types = {
            'address_1': str,
            'address_2': str
        }

        self.attribute_map = {
            'address_1': 'address_1',
            'address_2': 'address_2'
        }

        self._address_1 = address_1
        self._address_2 = address_2

    @classmethod
    def from_dict(cls, dikt) -> 'Locations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Locations of this Locations.  # noqa: E501
        :rtype: Locations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_1(self):
        """Gets the address_1 of this Locations.


        :return: The address_1 of this Locations.
        :rtype: float
        """
        return self._address_1

    @address_1.setter
    def address_1(self, address_1):
        """Sets the address_1 of this Locations.


        :param address_1: The address_1 of this Locations.
        :type address_1: float
        """
        if address_1 is None:
            raise ValueError("Invalid value for `address_1`, must not be `None`")  # noqa: E501
        if address_1 is not None and len(address_1) < 1:
            raise ValueError("Invalid value for `address_1`, length must be greater than or equal to `1`")  # noqa: E501

        self._address_1 = address_1

    @property
    def address_2(self):
        """Gets the address_2 of this Locations.


        :return: The address_2 of this Locations.
        :rtype: str
        """
        return self._address_2

    @address_2.setter
    def address_2(self, address_2):
        """Sets the address_2 of this Locations.


        :param address_2: The address_2 of this Locations.
        :type address_2: str
        """
        if address_2 is None:
            raise ValueError("Invalid value for `address_2`, must not be `None`")  # noqa: E501
        if address_2 is not None and len(address_2) < 1:
            raise ValueError("Invalid value for `address_2`, length must be greater than or equal to `1`")  # noqa: E501

        self._address_2 = address_2
